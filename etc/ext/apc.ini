
[APC]
; apc.enabled can be set to 0 to disable APC. This is primarily useful when APC is
; statically compiled into PHP, since there is no other way to disable it (when compiled
; as a DSO, the extension line in php.ini can just be commented-out). Default value 0.
apc.enabled=1

; The number of shared memory segments to allocate for the compiler cache. If APC is
; running out of shared memory but apc.shm_size is set as high as the system allows,
; raising this value might prevent APC from exhausting its memory.
;apc.shm_segments=1

; The size of each shared memory segment in MB. By default, some systems (including most
; BSD variants) have very low limits on the size of a shared memory segment.
;apc.shm_size="32M"

; The optimization level. Zero disables the optimizer, and higher values use more
; aggressive optimizations. Expect very modest speed improvements. This is experimental.
;apc.optimization=0

; A "hint" about the number of distinct source files that will be included or requested
; on your web server. Set to zero or omit if unsure; this setting is mainly useful for
; sites that have many thousands of source files.
;apc.num_files_hint=1000

; Just like apc.num_files_hint, a "hint" about the number of distinct user cache variables
; to store. Set to zero or omit if not sure.
;apc.user_entries_hint=4096

; The number of seconds a cache entry is allowed to idle in a slot in case this cache entry
; slot is needed by another entry. Leaving this at zero means that APC's cache could
; potentially fill up with stale entries while newer entries won't be cached. In the event
; of a cache running out of available memory, the cache will be completely expunged if ttl
; is equal to 0. Otherwise, if the ttl is greater than 0, APC will attempt to remove expired
; entries.
;apc.ttl=0

; The number of seconds a cache entry is allowed to idle in a slot in case this cache entry
; slot is needed by another entry. Leaving this at zero means that APC's cache could
; potentially fill up with stale entries while newer entries won't be cached. In the event
; of a cache running out of available memory, the cache will be completely expunged if ttl
; is equal to 0. Otherwise, if the ttl is greater than 0, APC will attempt to remove expired
; entries.
;apc.user_ttl=0

; The number of seconds that a cache entry may remain on the garbage-collection list. This
; value provides a fail-safe in the event that a server process dies while executing a
; cached source file; if that source file is modified, the memory allocated for the old
; version will not be reclaimed until this TTL reached. Set to zero to disable this feature.
;apc.gc_ttl=3600

; On by default, but can be set to off and used in conjunction with positive apc.filters
; so that files are only cached if matched by a positive filter.
;apc.cache_by_default=1

; A comma-separated list of POSIX extended regular expressions. If any pattern matches the
; source filename, the file will not be cached. Note that the filename used for matching
; is the one passed to include/require, not the absolute path. If the first character of
; the expression is a + then the expression will be additive in the sense that any files
; matched by the expression will be cached, and if the first character is a - then
; anything matched will not be cached. The - case is the default, so it can be left off.
;apc.filters=""

; If compiled with MMAP support by using --enable-mmap this is the mktemp-style file_mask
; to pass to the mmap module for determining whether your mmap'ed memory region is going
; to be file-backed or shared memory backed. For straight file-backed mmap, set it to
; something like /tmp/apc.XXXXXX (exactly 6 Xs). To use POSIX-style shm_open/mmap put a
; .shm somewhere in your mask. e.g. /apc.shm.XXXXXX You can also set it to /dev/zero to
; use your kernel's /dev/zero interface to anonymous mmap'ed memory. Leaving it undefined
; will force an anonymous mmap.
;apc.mmap_file_mask=""

; On very busy servers whenever you start the server or modify files you can create a race
; of many processes all trying to cache the same file at the same time. This option sets
; the percentage of processes that will skip trying to cache an uncached file. Or think of
; it as the probability of a single process to skip caching. For example, setting
; apc.slam_defense to 75 would mean that there is a 75% chance that the process will not
; cache an uncached file. So, the higher the setting the greater the defense against cache
; slams. Setting this to 0 disables this feature.
; Deprecated by apc.write_lock.
;apc.slam_defense=1

; When a file is modified on a live web server it really ought to be done in an atomic manner.
; That is, written to a temporary file and renamed (mv) the file into its permanent position
; when it is ready. Many text editors, cp, tar and other such programs don't do this. This
; means that there is a chance that a file is accessed (and cached) while it is still being
; written to. This apc.file_update_protection setting puts a delay on caching brand new files.
; The default is 2 seconds, which means that if the modification timestamp (mtime) on a file
; shows that it is less than 2 seconds old when it is accessed, it will not be cached. The
; unfortunate person who accessed this half-written file will still see weirdness, but at
; least it won't persist. If all of the webserver's files are atomically updated, via some
; method like rsync (which updates correctly), this protection can be disabled by setting this
; directive to 0. If the system is flooded with i/o and some update procedures are taking
; longer than 2 seconds, this setting should be increased to enable the protection on those
; slower update operations.
;apc.file_update_protection=2

; Mostly for testing and debugging. Setting this enables APC for the CLI version of PHP. Under
; normal circumstances, it is not ideal to create, populate and destroy the APC cache on every
; CLI request, but for various test scenarios it is useful to be able to enable APC for the CLI
; version of PHP easily.
;apc.enable_cli=0

; Prevent files larger than this value from getting cached. Defaults to 1M.
;apc.max_file_size="1M!

; Be careful changing this setting.
; This defaults to on, forcing APC to stat (check) the script on each request to determine
; if it has been modified. If it has been modified it will recompile and cache the new
; version. If this setting is off, APC will not check, which usually means that to force
; APC to recheck files, the web server will have to be restarted or the cache will have to
; be manually cleared. Note that FastCGI web server configurations may not clear the cache
; on restart. On a production server where the script files rarely change, a significant
; performance boost can be achieved by disabled stats
; For included/required files this option applies as well, but note that for relative path
; includes (any path that doesn't start with / on Unix) APC has to check in order to uniquely
; identify the file. If you use absolute path includes APC can skip the stat and use that
; absolute path as the unique identifier for the file.
;apc.stat=1

; On busy servers, when the web server is first started, or when many files have been modified
; at the same time, APC may try to compile and cache the same file multiple times. Write_lock
; guarantees that only one process will attempt to compile and cache an uncached script. The
; other processes attempting to use the script will run without using the opcode cache, rather
; than locking and waiting for the cache to prime.
;apc.write_lock=1

; Logs any scripts that were automatically excluded from being cached due to early/late binding
; issues.
;apc.report_autofilter=0

; Optimize include_once and require_once calls and avoid the expensive system calls used.
; Warning
; This feature is EXPERIMENTAL. The behaviour of this directive, its name, and surrounding
; documentation may change without notice in a future release of APC. This feature should be used
; at your own risk.
;apc.include_once_override=0

; RFC1867 File Upload Progress hook handler is only available if APC was compiled against PHP
; 5.2.0 or later. When enabled, any file uploads which includes a field called APC_UPLOAD_PROGRESS
; before the file field in an upload form will cause APC to automatically create an upload_key
; user cache entry where key is the value of the APC_UPLOAD_PROGRESS form entry.
; Note that the hidden field specified by APC_UPLOAD_PROGRESS must come before the file field,
; otherwise the upload progress will not work correctly. Default value 0.
; Note that the file upload tracking is not threadsafe at this point, so new uploads that happen
; while a previous one is still going will disable the tracking for the previous.
; Note that the rate is only available once all file transfers are completed.
; Example #1 An apc.rfc1867 example
; <?php
; print_r(apc_fetch("upload_$_POST[APC_UPLOAD_PROGRESS]"));
; ?>
; The above example will output something similar to:
; Array
; (
;     [total] => 1142543
;     [current] => 1142543
;     [rate] => 1828068.8
;     [filename] => test
;     [name] => file
;     [temp_filename] => /tmp/php8F
;     [cancel_upload] => 0
;     [done] => 1
; )
apc.rfc1867=1

; Key prefix to use for the user cache entry generated by rfc1867 upload progress
; functionality.
;apc.rfc1867_prefix="upload_"

; Specify the hidden form entry name that activates APC upload progress and specifies
; the user cache key suffix.
;apc.rfc1867_name="APC_UPLOAD_PROGRESS"

; The frequency that updates should be made to the user cache entry for upload progress.
; This can take the form of a percentage of the total file size or a size in bytes
; optionally suffixed with "k", "m", or "g" for kilobytes, megabytes, or gigabytes
; respectively (case insensitive). A setting of 0 updates as often as possible, which
; may cause slower uploads.
;apc.rfc1867_freq="0"

; TTL for rfc1867 3600.
;apc.rfc1867_ttl=3600

; This enables a lock-free local process shadow-cache which reduces lock contention when
; the cache is being written to.
;apc.localcache=0

; The size of the local process shadow-cache, should be set to a sufficiently large value,
; approximately half of apc.num_files_hint.
;apc.localcache.size=512

; Enables APC handling of signals, such as SIGSEGV, that write core files when signaled.
; When these signals are received, APC will attempt to unmap the shared memory segment
; in order to exclude it from the core file. This setting may improve system stability
; when fatal signals are received and a large APC shared memory segment is configured.
; Warning
; This feature is potentially dangerous. Unmapping the shared memory segment in a fatal
; signal handler may cause undefined behaviour if a fatal error occurs.
; Note:
; Although some kernels may provide a facility to ignore various types of shared memory
; when generating a core dump file, these implementations may also ignore important
; shared memory segments such as the Apache scoreboard.
;apc.coredump_unmap=0

; Verification with ctime will avoid problems caused by programs such as svn or rsync by
; making sure inodes haven't changed since the last stat. APC will normally only check mtime.
;apc.stat_ctime=0

; If on, then relative paths are canonicalized in no-stat mode. If set, then files included
; via stream wrappers can not be cached as realpath() does not support stream wrappers.
;apc.canonicalize=1

;
;apc.preload_path=""

; Use the SAPI request start time for TTL.
;apc.use_request_time=1

; Records a md5 hash of files.
;apc.file_md5=0

; Enables lazy loading for functions.
;apc.lazy_functions=0

; Enables lazy loading for classes.
;apc.lazy_classes=0

; Default is default
apc.serializer=igbinary

