#!/bin/bash
  # alias autoconf=autoconf213
  # shopt -s expand_aliases
  # autoconf --version


# The most important line in every shell script. Basically this says:
# This script should fail once a command invocation itself fails.
set -e

# Set the `PHPENV_DEBUG` environment variable to
# `yes` to trigger the `set -x` call, which in turn
# outputs every issued shell command to `STDOUT`.
[[ -n "$PHPENV_DEBUG" ]] && set -x

# Preserve STDERR on FD3, so we can easily log build errors on
# FD2 to a file and use FD3 for visible error messages.
exec 3<&2
STATUS=0
CONTINUE=0

#/ Usage: phpenv install [--[deep-]clean] [--releases] [--ini|i <environment>] [<release>] [<build>] [--continue|c status]
#/
#/ Arguments:
#/   release:    Which PHP release to build and install
#/     build:    Optionally supply a build identifier to enable
#/               installation of multiple versions of the same
#/               release ie debug, mysql, mssql, postgres, intl
#/
#/ Options:
#/   --releases: Lists all available definitions
#/      --clean: Clean the build directory of any generated files
#/ --deep-clean: Thoroughly clean generated files, clear ccache
#/               clear generated files for extensions and delete
#/               downloaded or cached content content.
#/               NOTE: these do not remove the source repository
#/                     or any of the extension submodules.
#/      --ini|i: Specifies which php.ini-<environment> from the
#/               source distribution is used as default php.ini
#/  --continue|c continue from a specific workflow status index
#/               by skipping the steps that were already completed
#/               leading up to this point, where status is one of:
#/
#/                   0 (default) start from the beginning
#/                   1 Start from [Fetching] skipping first steps
#/                   2 Start from [Branching] skip branching release
#/                   3 Start from [Patching] applying patches
#/                   4 Start from [Configuring] skip running ./configure
#/                   5 Start from [Compiling] skip make, install, clean
#/                   6 Start from [Config ini] Skip updating php.ini
#/                   7 Start from [Pyrus] |7| skip downloading and installing
#/                   8 Start from [Extensions] skip installing extensions
#/
#/

# Process flow and continuation
# ------------------------------
function workflow() {
  case "$1" in

    0)  # update the repo
        fetch_releases
      ;;
    1)  # checkout re/ease to branch build
        build_branch
      ;;
    2)  # run configure
        patch_roulette
      ;;
    3)  # run configure
        configure_release
      ;;
    4)  # compile
        build_release
      ;;
    5)  # create configuration
        make_php_ini
      ;;
    6)  # install pyrus
        install_pyrus
      ;;
    7)  # install custom extensions
        build_extensions
      ;;
    *)  # This should not happen
        log "Error" "Unexpected workflow status $1, aborting"
        exit $1
      ;;
  esac
}

function continue_after() {
  if [ ${CONTINUE} -gt $1 ]; then
    log "$2" "Omitted continue from $CONTINUE"
    echo $
    [[ ${STATUS} -le 7 ]] && workflow ${STATUS}
    return 0
  fi
  return 1
}

# Utility Functions
# -----------------

# processes the usage message for the script and displays it on STDERR.
function display_usage() {
  grep '^#/' <"$0" | cut -c4- >&3
}

# clones the php-src repo if it doesn't exist
function init() {
  if [[ ! -d "$SRC_DIR" ]]; then
    log "init" "cloning source from php-src Github repo"
    ${GIT} clone "$SRC_URL" "$SRC_DIR" &> /dev/null
    cd "$PHPENV_ROOT"
    ${GIT} submodule update --init --rebase --recursive &> /dev/null
  fi
  cd "$SRC_DIR"/ext
  find "$PHPENV_ROOT"/php-ext -maxdepth 1 \! -name "*ext" -exec ln -s {} \; 2>/dev/null || true
  [[ ${VERSION_MAJOR} -eq 5 && ${VERSION_MINOR} -le 2 || ${VERSION_MAJOR} -lt 5 ]] && [[ -L ncurses ]] && rm ncurses
  cd "$SRC_DIR"
}

# logs the given log text with a [marker] to STDERR.
function log() {
  local marker=""
  local text="$2"
  if [ 0 -lt ${#1} ]; then
    if [[ 7 -ge ${STATUS} && ${1:0:4} != 'make' ]]; then
      let "STATUS+=1"
      marker="[$1]"
      text="|$STATUS| $2"
    else
      marker="$1:"
    fi
  fi

  printf "%35s %-65s\n" "$marker" "$text"  >&3
}

# uses uname to check if running OSX
# this is used later on to enable specifc fixes for
# OSX oddnesses in library file placement
function is_osx() {
  return $(test $(uname) == "Darwin")
}

# gets latest code from github repo
function fetch_releases() {
  continue_after 0 "Fetching" && return

  cd "$SRC_DIR"
  if ${GIT} branch|grep -q '* master'; then
    log "Fetching" "latest code from Github repo"
    ${GIT} pull &> /dev/null
  else
    cleanup
    fetch_releases
  fi
}

# lists all releases found in the github repo
function list_releases() {
  cd "$SRC_DIR"
  fetch_releases
  local release_out=""
  for release in $(${GIT} tag | sed '/php-/!d'); do
    release_out="$release_out\n$release"
  done
  release_out="PHP releases as were available on:\n$(date)
  \n$(echo -e "$release_out" | sort -bt. -k1,1r -k2,2nr -k3.1,3.2nr)"
  [[ -n ${PAGER} ]] && echo -e "$release_out" | ${PAGER} || echo -e "$release_out" | less
  unset release_out
}

# Handles build errors, and displays the last 10 line of the build log.
function build_error() {
  {
    [[ ${STATUS} -eq 0 ]] && echo "Aborting installation." && exit ${STATUS}
    echo
    echo "BUILD ERROR: STATUS is $STATUS"
    echo "The script aborted unexpectedly when a command returned a non zero exit code."
    if awk 'END{exit NR == 0};' $LOG_PATH.err; then
      echo "Last 10 linens from the error log file may shed some light"
      echo "-------------------------------------------------------------------------------------"
      echo "$(tail -n10 "$LOG_PATH.err")"
      echo
      echo "-------------------------------------------------------------------------------------"
    else
      echo "Unfortunately the error log file appears to be empty, perhaps the STDOUT log may be of help to you."
    fi
    echo
    echo "The full STDERR Log is available here $LOG_PATH.err"
    echo "The full STDOUT Log is available here $LOG_PATH"
    [[ -z ${PAGER} ]] && PAGER=less
    test `which pbcopy` && (echo ${PAGER} ${LOG_PATH} | `which pbcopy`) && \
      echo "The command to view the logfile with \$PAGER has been copied to your clipboard."

    echo
    reset_streams
    exit ${STATUS}
  } >&3
}

# cleans up our build environment
function cleanup() {
  cd "$SRC_DIR"
  ${GIT} checkout -f master && ${GIT} branch -D build &> /dev/null
}

# Reset the default streams and close file descriptors
function reset_streams() {
  exec 2>&3 4>&- 3>&- 1>&5 5>&-
}

# sets and unsets arguments for `configure`. Pass it the `-D` option to unset
# the argument given in `$2`. Otherwise the first argument is the name of the
# option and the second argument contains the optional value.
function configure_option() {
  if [[ "$1" = "-D" ]]; then
    # This variable will contain the filtered arguments.
    local filtered=

    for option in ${CONFIGURE_OPTIONS}; do
      # If the argument starts with the given string in `$1`
      # then skip it from concatenation. Otherwise add it to
      # the filtered options.
      case "$option" in
        "$2"*) ;;
        *) filtered="$filtered $option";;
      esac
    done

    # Trim the leading whitespace added in the concatenation.
    filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

    # Then replace the old argument list with the new one.
    CONFIGURE_OPTIONS="$filtered"
    return 0
  else
    if [[ "$1" = "-R" ]]; then
      configure_option -D "$2"
      configure_option "$2" "$3"
      return 0
    fi
  fi

  CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

  [[ -n "$2" ]] && CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
}

# Package Manager Functions
# -------------------------

# configures a `pear` install in `$PREFIX/pear`
function enable_pear() {
  [[ ! -d "$PREFIX/pear" ]] && mkdir -p "$PREFIX/pear"
  configure_option "--with-pear" "$PREFIX/pear"
}

# installs Pyrus
function install_pyrus() {
  continue_after 6 "Pyrus" && return

  if [[ ${VERSION_MAJOR} -eq 5 && ${VERSION_MINOR} -le 2 || ${VERSION_MAJOR} -lt 5 ]]; then
    log "Pyrus" "Not compatible with $RELEASE_VERSION skipping"
    return 0
  fi

  local pyrus_url="http://pear2.php.net/pyrus.phar"
  local pyrus_bin="$PREFIX/bin/pyrus"
  local pyrus_home="$PREFIX/share/pyrus"

  log "Pyrus" "downloading and installing from $pyrus_url"

  # if pyrus doesn't exist, download it
  [[ -d "$PHPENV_ROOT/var" ]] || mkdir -p "$PHPENV_ROOT/var"
  [[ ! -e "$PHPENV_ROOT/var/pyrus.phar" ]] && wget -qP "$PHPENV_ROOT/var/" $pyrus_url
  [[ ! -e "$PREFIX/bin/pyrus.phar" ]] && cp "$PHPENV_ROOT/var/pyrus.phar" "$PREFIX/bin/."

  # if $pyrus_home doesn't exist, create it
  [[ ! -d "$pyrus_home" ]] && mkdir -p "$pyrus_home"

  # Add the directory where PEAR Packages get installed, to PHP's include path
  local default_include_path=$("$PREFIX/bin/php" -r "echo get_include_path();")
  echo "include_path=$default_include_path:$PREFIX/share/pyrus/.pear/php" > "$PREFIX/etc/conf.d/pyrus.ini"

  # Create the Pyrus executable
  cat > "$PREFIX/bin/pyrus" <<SH
#!/usr/bin/env bash
export HOME="$pyrus_home"
"$PREFIX/bin/php" -dphar.readonly=0 "$PREFIX/bin/pyrus.phar" \$@
SH

  chmod 755 "$PREFIX/bin/pyrus"

  if [[ ! -f "$pyrus_home/.pear/pearconfig.xml" ]]; then

    [[ ! -d "$pyrus_home/.pear" ]] && mkdir "$pyrus_home/.pear"

    # Create the default pearconfig.xml by hand, otherwise the
    # User would be asked for the PEAR path on the first run.
    cat > "$pyrus_home/.pear/pearconfig.xml" <<EOF
<?xml version="1.0"?>
<pearconfig version="1.0">
<default_channel>pear2.php.net</default_channel>
<auto_discover>0</auto_discover>
<http_proxy></http_proxy>
<cache_dir>$pyrus_home/.pear/cache</cache_dir>
<temp_dir>$pyrus_home/.pear/tmp</temp_dir>
<verbose>1</verbose>
<preferred_state>beta</preferred_state>
<umask>0022</umask>
<cache_ttl>3600</cache_ttl>
<my_pear_path>$pyrus_home/.pear</my_pear_path>
<plugins_dir>$pyrus_home/.pear</plugins_dir>
</pearconfig>
EOF

  fi

  local ext_dir=$("$PREFIX/bin/php" -r "echo ini_get('extension_dir');")

  "$pyrus_bin" set bin_dir "$PREFIX/bin/" > /dev/null
  "$pyrus_bin" set php_prefix "$PREFIX/bin/" > /dev/null
  "$pyrus_bin" set ext_dir "$ext_dir" > /dev/null
}

# Install / Build Functions
# -------------------------
# kicks off the entire build / install process
# and sends output to the log file
function install_release() {
  {
    PREFIX="$PHPENV_ROOT/versions/$VERSION"
    local cwd="$(pwd)"
    cd "$SRC_DIR"
    if [[ ! valid_release ]]; then
      log "Error" "Release $RELEASE not found."
      exit ${E_RELEASE_NOT_FOUND}
    fi
    [[ ${CONTINUE} -eq 0 ]] && check_existing

    while [ 7 -ge ${STATUS} ]; do
      workflow ${STATUS}
    done
#    export INSTALL_ROOT="" # $PREFIX"
#    mkdir -p $PREFIX/private/etc/apache2
#    echo "#LoadModule php5_module libexec/apache2/libphp5.so" > $PREFIX/private/etc/apache2/httpd.conf
#    echo "#LoadModule php5_module libexec/apache2/libphp5.so" >> $PREFIX/private/etc/apache2/httpd.conf



    # install Pyrus if PHP version > 5.2

    $PHPENV_ROOT/bin/phpenv rehash
    cd "$cwd"

#    ln -sf ./phar.phar "$PREFIX/bin/phar"
#    sed -i '' -e "s#prefix=\"/\"#prefix=\"${PREFIX}\"#" \
#              -e "s#include_dir=\"#include_dir=\"\`eval echo \${prefix}\`#" \
#              -e "s#extension_dir=\'#extension_dir=\`eval echo \${prefix}\`\'#" \
#              "${PREFIX}/bin/php-config"
#    sed -i '' -e "s#prefix=\'/\'#prefix=\"${PREFIX}\"#" \
#              -e "s#\${prefix}##" \
#              -e "s#eval echo #eval echo \${prefix}#" \
#              "${PREFIX}/bin/phpize"
#    "s#extension_dir=\'#extension_dir=\`eval echo \${prefix}\`\'#"
#    local extension_dir="$PREFIX$("$PREFIX/bin/php"  -r 'echo ini_get("extension_dir");')"
#    mkdir -p $extension_dir
#    echo extension_dir=\"$extension_dir\" >> $PREFIX/etc/php.ini
#    mkdir -p "${extension_parent%/*}/build"
#    mkdir -p "$PREFIX$extension_dir"
#    [[ -L "$extension_dir" ]] || ln -fs "$PREFIX$extension_dir" "$extension_dir"
  } 2>&4
}

function build_extensions() {
  continue_after 7 "Extensions" && return

  if [ 0 -lt ${#MANUAL_EXTENSIONS[@]} ]; then
    ext_dir=$("$PREFIX/bin/php" -r "echo ini_get('extension_dir');")
    mkdir -p "$ext_dir"
    log "Extensions" "Manually installing shared extensions."
    for extension in ${MANUAL_EXTENSIONS[@]}; do
      cd "$SRC_DIR/ext/$extension"
      "$PREFIX/bin/phpize"
      ./configure --with-php-config="$PREFIX/bin/php-config"
      make
      make install
      if [ ${extension} == "xdebug" ]; then
        echo "zend_extension=\"$ext_dir/xdebug.so\"" >> "$PREFIX/etc/php.ini"
      else
        extension=${extension/-/_}
        extension=${extension%%/*}
        echo "extension=$extension.so" >> "$PREFIX/etc/php.ini"
      fi
    done
  fi
}

function check_existing() {
  if [ -d "$PREFIX" ]; then
    echo "The version $VERSION was previously installed." >&3
    printf "Would you like to remove the current installation and re-install? Y/n: " >&3
    read -n 1 -t 10 YN >&3 || YN='y'
    echo -e "\n" >&3
    if echo ${YN}|grep -qi y; then
      rm -rf "$PREFIX"
    else
      false
    fi
  fi
}

function valid_release() {
  # verify chosen release before continuing
  for release in $(${GIT} tag | sed '/php-/!d'); do
    [[ ${RELEASE} = ${release} ]] && return 0
  done
  return 1
}

function build_branch() {
  continue_after 1 "Branching" && return

  log "Branching" "for a clean build environment"
  ${GIT} branch | grep -q "\* build" || ${GIT} checkout -b build ${RELEASE}
}

# handles all the heavy lifting when building $RELEASE
function build_release() {
  continue_after 4 "Compiling" && return

  log "Compiling" "$PREFIX"
  make
  log "make" "success"
  make install
  log "make install" "success"
  make clean
  log "make clean" "success"
}

# Create php.ini, set defaults, and append extension settings
function make_php_ini() {
  continue_after 5 "Config ini" && return

  if [[ -n "$DEFAULT_INI" ]]; then
    if [[ -f "$PREFIX/$DEFAULT_INI" ]]; then
      cp "$PREFIX/$DEFAULT_INI" "$PREFIX/etc/php.ini"
    else
      if [[ -f "$DEFAULT_INI" ]]; then
        cp "$DEFAULT_INI" "$PREFIX/etc/php.ini"
      fi
    fi
  fi
  log "Config ini" "appending add-on extention configuration to php.ini"
  cat "$PHPENV_ROOT/etc/ext"/* >> "$PREFIX/etc/php.ini"
}

# Apply predefined patches as required
function patch_roulette() {
  continue_after 2 "Patching" && return

  log "Patching" "Applying patches to the source if any are applicable."
  if [[ ${VERSION_MAJOR} -eq 5 && ${VERSION_MINOR} -gt 2 ]]; then
    patch ~/.phpenv/php-src/Makefile.global ~/.phpenv/patches/readline-x86_64-fix.patch
  fi
}
# This is invoked by `build_release` and is used to
# build PHP with the arguments in `$CONFIGURE_OPTIONS`.
# It also determines whether or not to install PEAR or Pyrus
function configure_release() {
  continue_after 3 "Configuring" && return

  log "Configuring" "build options for selected release"

  # Mac OSX stores some libraries (for example `libpng`)
  # in `/usr/X11/lib` instead of `/usr/lib`.
  #
  # This currently builds PHP without the `gettext` and `readline`
  # extensions, as I've currently not got them to work on my machine.
  # if is_osx; then
  #  configure_option -D "--with-gettext"
  #  configure_option -D "--with-readline"
  #  configure_option -R "--with-libedit"
  #  configure_option -R "--with-libedit --with-png-dir" "/usr/X11"
  # fi
  if is_osx; then
    export ac_cv_exeext=''
  fi

  # Add the config-file-path, config-file-scan-dir aswell as the
  # prefix to the build options, these cannot be changed by definitions.
  local argv="$CONFIGURE_OPTIONS
        --with-config-file-path=$PREFIX/etc
        --with-config-file-scan-dir=$PREFIX/etc/conf.d
        --prefix=$PREFIX"

  mkdir -p "$PREFIX/etc/conf.d"

  # Set the lib dir to `lib64` on **x86_64** systems.
#  if [ "$(uname -m)" = "x86_64" ]; then
#    argv="$argv --with-libdir=lib64"
#  fi

  # enable PEAR if PHP version < 5.3
  [[ ${VERSION_MAJOR} -le 5 || ${VERSION_MINOR} -lt 3 ]] && enable_pear
  # patch for x86_64 linking problems building with readline

  echo
  printf './configure '
  echo $argv
  echo

  # perform build / configure
  phpenv-hooks install pre-buildconf
  rm -rf configure autom4te.cache
  ./buildconf --force
  phpenv-hooks install pre-configure
  ./configure $argv
  phpenv-hooks install post-configure
  sed -i '' 's#INSTALL_IT =.*$#INSTALL_IT=mkdir -p \${prefix}/libexec \&\& cp libs/libphp5.so  \${prefix}/libexec/.#' Makefile
  mkdir -p "$PREFIX/etc"
  echo "LoadModule php5_module $PREFIX/libexec/libphp5.so" > "$PREFIX/etc/httpd.conf"
}

function clean_repository() {
  repo=$1
  cd "$repo"
  ${GIT} reset --hard
  [[ -f "$repo/.gitignore" ]] && mv .gitignore .gitignore_
  ${GIT} -c color.status=never status|\
    sed -e'/gitignore/d' -e'/#[^ ]/!c\' -e's///'|\
    xargs -t rm -rf
  # ' # To block the escaped quote from function c\
  [[ -f "$repo/.gitignore_" ]] && mv .gitignore_ .gitignore
  echo $repo
}


# Here the magic begins
# ---------------------
GIT=$(which git)
SRC_DIR="$PHPENV_ROOT/php-src"
SRC_URL="https://github.com/php/php-src.git"

# Provide phpenv completions
if [ "$1" = "--complete" ]; then
  echo --releases
  echo --clean
  echo --deep-clean
  echo -i
  echo --ini
  echo -c
  echo --continue
  [[ -d "$SRC_DIR/.git" ]] && list_releases
  exit 0
fi


# always ensure we have cloned the php-src repo
init

# Display the Usage message if no arguments are given.
if [[ -z $1 || "$1" = "--help" || "$1" = "-h" ]]; then
  display_usage
  exit 1
fi

# display list of available releases if --releases was passed in
if [[ "$1" = "--releases" ]]; then
  list_releases
  exit 0
fi

# clean build environment
if [[ "$1" = "--clean" ]]; then
  cd "$SRC_DIR"
  ${GIT} branch|grep -q '* master' || cleanup
  clean_repository "$SRC_DIR"
  exit 0
fi


# thoroughly clean build environment
if [[ "$1" = "--deep-clean" ]]; then
  cd "$SRC_DIR"
  phpenv-install --clean
  which ccache && `which ccache` -Cz
  for extension in $(find "$PHPENV_ROOT/php-ext" -maxdepth 1 ! -name "php-ext" -print); do
    clean_repository "$extension"
  done
  rm /tmp/phpenv* &> /dev/null
  test -e ../var/pyrus.phar && rm -rf ../var/pyrus.phar
  exit 0
fi

# If `-i` or `--ini` is given as first argument, then
# treat the second argument as `php.ini` file.
if [[ "$1" = "-i" || "$1" = "--ini" ]]; then
  # If an existing path is passed (and the path is a file)
  # then use this file, otherwise use `php.ini-<value>`
  # from the tarball.
  if [[ -f "$2" ]]; then
    DEFAULT_INI="$2"
  else
    DEFAULT_INI="php.ini-$2"
  fi
  shift
  shift
  echo "$DEFAULT_INI gets used as php.ini"
fi

# grab the release that the user wants to build
RELEASE=$1
BUILD=$2
if [[ "$2" = "-c" || "$2" = "--continue" ]]; then
  CONTINUE=${3}
  BUILD=""
fi
if [[ "$3" = "-c" || "$3" = "--continue" ]]; then
  CONTINUE=${4}
fi
if [ "${RELEASE:0:1}" = '-' ]; then
  log "Error" "Unknown option $RELEASE, expected release identifier, aborting."
  exit 1
fi
if [ "${BUILD:0:1}" = '-' ]; then
  log "Error" "Unknown option $BUILD, expected a build identifier, aborting."
  exit 1
fi

# Generate the Path for the build log.
LOG_PATH="/tmp/phpenv-install-$RELEASE.$(date "+%Y%m%d%H%M%S").log"
# Redirect everything logged to STDOUT to the Log file.
exec 5>$1
exec >$LOG_PATH
# Redirect everything logged to STDERR to the .err Log file.
exec 4<>$LOG_PATH.err

# Source the build configuration
PHPENV_ROOT="$( dirname $( dirname "$0" ) )"
source "$PHPENV_ROOT/etc/config.source"

echo -e "Building $VERSION\n" >&2

# Handle script termination with the `cleanup_abort`.
trap cleanup_abort SIGINT SIGTERM
# Handle Script Errors with `build_error`.
trap build_error ERR EXIT

# start build / install process
install_release

# Unbind the error handler.
trap - ERR
trap - EXIT

# Display a success Notice
log "Success" "The installation of the $RELEASE release was successfully completed."
log "Info" "The log files produced by the procedure are available, in the tmp folder, for your review:"
log "" " - Any warnings or messeages sent to STDERR was logged to $LOG_PATH.err"
log "" " - All messeages sent to STDOUT was logged to $LOG_PATH"
[[ -z $PAGER ]] && PAGER=less
test `which pbcopy` && (echo $PAGER $LOG_PATH | `which pbcopy`) && echo "The command to view the logfile with \$PAGER has been copied to your clipboard."

trap - SIGINT
trap - SIGTERM

# Reset the default streams and close file descriptors
reset_streams
